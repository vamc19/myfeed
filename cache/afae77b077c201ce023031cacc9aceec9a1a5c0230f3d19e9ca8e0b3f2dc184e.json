{"title": "The Old New Thing", "entries": [{"title": "How to wait for multiple C++ coroutines to complete before propagating failure, symmetric transfer", "url": "https://devblogs.microsoft.com/oldnewthing/20230703-00/?p=108387", "id": "https://devblogs.microsoft.com/oldnewthing/?p=108387", "updated_on": "2023-07-03T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "2023 mid-year link clearance", "url": "https://devblogs.microsoft.com/oldnewthing/20230630-01/?p=108384", "id": "https://devblogs.microsoft.com/oldnewthing/?p=108384", "updated_on": "2023-06-30T14:00:01", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "How to wait for multiple C++ coroutines to complete before propagating failure, custom promise", "url": "https://devblogs.microsoft.com/oldnewthing/20230630-00/?p=108382", "id": "https://devblogs.microsoft.com/oldnewthing/?p=108382", "updated_on": "2023-06-30T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "How to wait for multiple C++ coroutines to complete before propagating failure, peeling away at a tuple", "url": "https://devblogs.microsoft.com/oldnewthing/20230629-00/?p=108380", "id": "https://devblogs.microsoft.com/oldnewthing/?p=108380", "updated_on": "2023-06-29T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "How to wait for multiple C++ coroutines to complete before propagating failure, false hope", "url": "https://devblogs.microsoft.com/oldnewthing/20230628-00/?p=108377", "id": "https://devblogs.microsoft.com/oldnewthing/?p=108377", "updated_on": "2023-06-28T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "How to wait for multiple C++ coroutines to complete before propagating failure, unhelpful lambda", "url": "https://devblogs.microsoft.com/oldnewthing/20230627-00/?p=108375", "id": "https://devblogs.microsoft.com/oldnewthing/?p=108375", "updated_on": "2023-06-27T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "How to wait for multiple C++ coroutines to complete before propagating failure, initial plunge", "url": "https://devblogs.microsoft.com/oldnewthing/20230626-00/?p=108373", "id": "https://devblogs.microsoft.com/oldnewthing/?p=108373", "updated_on": "2023-06-26T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "What can go wrong if you release an SRWLock from a thread different from the one that acquired it?", "url": "https://devblogs.microsoft.com/oldnewthing/20230623-00/?p=108371", "id": "https://devblogs.microsoft.com/oldnewthing/?p=108371", "updated_on": "2023-06-23T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "How can I find out the last time a user logged on from C++?", "url": "https://devblogs.microsoft.com/oldnewthing/20230622-00/?p=108369", "id": "https://devblogs.microsoft.com/oldnewthing/?p=108369", "updated_on": "2023-06-22T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "The case of the make_shared on a C++/WinRT type", "url": "https://devblogs.microsoft.com/oldnewthing/20230621-00/?p=108361", "id": "https://devblogs.microsoft.com/oldnewthing/?p=108361", "updated_on": "2023-06-21T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "Why is Windows using only even-numbered processors?", "url": "https://devblogs.microsoft.com/oldnewthing/20230620-00/?p=108358", "id": "https://devblogs.microsoft.com/oldnewthing/?p=108358", "updated_on": "2023-06-20T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "Why am I being told about a signed/unsigned comparison, and why only sometimes, and how can I fix it?", "url": "https://devblogs.microsoft.com/oldnewthing/20230619-00/?p=108355", "id": "https://devblogs.microsoft.com/oldnewthing/?p=108355", "updated_on": "2023-06-19T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "The case of the invalid handle despite being managed by an RAII type, part 2", "url": "https://devblogs.microsoft.com/oldnewthing/20230616-00/?p=108348", "id": "https://devblogs.microsoft.com/oldnewthing/?p=108348", "updated_on": "2023-06-16T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "The case of the invalid handle despite being managed by an RAII type", "url": "https://devblogs.microsoft.com/oldnewthing/20230615-00/?p=108342", "id": "https://devblogs.microsoft.com/oldnewthing/?p=108342", "updated_on": "2023-06-15T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "How expensive is it to create a Windows performance counter?", "url": "https://devblogs.microsoft.com/oldnewthing/20230614-00/?p=108338", "id": "https://devblogs.microsoft.com/oldnewthing/?p=108338", "updated_on": "2023-06-14T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}], "feed_etag": "W/\"74194b91ec5108d2be193cc0923b746a\"", "feed_last_modified": "Mon, 03 Jul 2023 14:00:26 GMT", "last_refresh": "2023-07-03T15:17:06.698961+00:00"}