{"title": "The Old New Thing", "entries": [{"title": "The AArch64 processor (aka arm64), part 3: Addressing modes", "url": "https://devblogs.microsoft.com/oldnewthing/20220728-00/?p=106912", "id": "https://devblogs.microsoft.com/oldnewthing/?p=106912", "updated_on": "2022-07-28T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "The AArch64 processor (aka arm64), part 2: Extended register operations", "url": "https://devblogs.microsoft.com/oldnewthing/20220727-00/?p=106907", "id": "https://devblogs.microsoft.com/oldnewthing/?p=106907", "updated_on": "2022-07-27T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "The AArch64 processor (aka arm64), part 1: Introduction", "url": "https://devblogs.microsoft.com/oldnewthing/20220726-00/?p=106898", "id": "https://devblogs.microsoft.com/oldnewthing/?p=106898", "updated_on": "2022-07-26T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "Yes, the 8086 wanted to be mechanically translatable from the 8080, but why not add the ability to indirect through AX, CX and DX?", "url": "https://devblogs.microsoft.com/oldnewthing/20220725-00/?p=106889", "id": "https://devblogs.microsoft.com/oldnewthing/?p=106889", "updated_on": "2022-07-25T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "Using C++/WinRT\u2019s final_release to control which thread destructs your object", "url": "https://devblogs.microsoft.com/oldnewthing/20220722-00/?p=106883", "id": "https://devblogs.microsoft.com/oldnewthing/?p=106883", "updated_on": "2022-07-22T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "Making sure that people use make_unique and make_shared to make your object", "url": "https://devblogs.microsoft.com/oldnewthing/20220721-00/?p=106879", "id": "https://devblogs.microsoft.com/oldnewthing/?p=106879", "updated_on": "2022-07-21T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "My class derives from std::enable_shared_from_this, but shared_from_this() doesn\u2019t work", "url": "https://devblogs.microsoft.com/oldnewthing/20220720-00/?p=106877", "id": "https://devblogs.microsoft.com/oldnewthing/?p=106877", "updated_on": "2022-07-20T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "Microspeak: The one-pager", "url": "https://devblogs.microsoft.com/oldnewthing/20220719-00/?p=106873", "id": "https://devblogs.microsoft.com/oldnewthing/?p=106873", "updated_on": "2022-07-19T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "C++ coroutine gotcha: Falling off the end of a function-level catch", "url": "https://devblogs.microsoft.com/oldnewthing/20220718-00/?p=106870", "id": "https://devblogs.microsoft.com/oldnewthing/?p=106870", "updated_on": "2022-07-18T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "Processing a ValueSet or PropertySet even in the face of possible mutation, part 4", "url": "https://devblogs.microsoft.com/oldnewthing/20220715-00/?p=106866", "id": "https://devblogs.microsoft.com/oldnewthing/?p=106866", "updated_on": "2022-07-15T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "Processing a ValueSet or PropertySet even in the face of possible mutation, part 3", "url": "https://devblogs.microsoft.com/oldnewthing/20220714-00/?p=106864", "id": "https://devblogs.microsoft.com/oldnewthing/?p=106864", "updated_on": "2022-07-14T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "Processing a ValueSet or PropertySet even in the face of possible mutation, part 2", "url": "https://devblogs.microsoft.com/oldnewthing/20220713-00/?p=106861", "id": "https://devblogs.microsoft.com/oldnewthing/?p=106861", "updated_on": "2022-07-13T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "Processing a ValueSet or PropertySet even in the face of possible mutation, part 1", "url": "https://devblogs.microsoft.com/oldnewthing/20220712-00/?p=106858", "id": "https://devblogs.microsoft.com/oldnewthing/?p=106858", "updated_on": "2022-07-12T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "How can I provide a Windows Runtime ValueSet or PropertySet while non-intrusively monitoring changes to it?", "url": "https://devblogs.microsoft.com/oldnewthing/20220711-00/?p=106852", "id": "https://devblogs.microsoft.com/oldnewthing/?p=106852", "updated_on": "2022-07-11T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}, {"title": "Windows Runtime observable collections don\u2019t mix well with multithreading", "url": "https://devblogs.microsoft.com/oldnewthing/20220708-00/?p=106847", "id": "https://devblogs.microsoft.com/oldnewthing/?p=106847", "updated_on": "2022-07-08T14:00:00", "subscription_id": "afae77b077c201ce023031cacc9aceec9a1a5c0230f3d19e9ca8e0b3f2dc184e", "subscription_title": "The Old New Thing"}], "feed_etag": "W/\"1293bc5b6478ca245c0779b254694f4b\"", "feed_last_modified": "Thu, 28 Jul 2022 15:02:26 GMT", "last_refresh": "2022-07-28T15:19:50.170154+00:00"}